package com.codingdojo.stefano.servicios;

import java.util.List;
import java.util.Optional;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;

import com.codingdojo.stefano.modelos.LoginUser;
import com.codingdojo.stefano.modelos.Project;
import com.codingdojo.stefano.modelos.User;
import com.codingdojo.stefano.repositorios.UserRepository;
import com.codingdojo.stefano.repositorios.ProjectRepository;

@Service
public class AppService {
	
	@Autowired
	private UserRepository repoUser;
	
	@Autowired
	private ProjectRepository repoProject;
	
	//Funcion que registra un usuario
	public User register(User nuevoUsuario, BindingResult result) {
		
		//Comparando las contrase単as		
		if(!nuevoUsuario.getPassword().equals(nuevoUsuario.getConfirm())){
			result.rejectValue("password", "Matches", "Las contrase単as no coinciden.");				
		}
		
		//Revisar si el correo electronico ya existe
		String nuevoEmail = nuevoUsuario.getEmail();
		if(repoUser.findByEmail(nuevoEmail).isPresent()) {
			result.rejectValue("email", "Unique", "El correo electronico ya fue ingresado previamente.");
		}
		
		if(result.hasErrors()) {
			return null;
		}else {
			//Encriptar la contrase単a
			String contraEncriptada = BCrypt.hashpw(nuevoUsuario.getPassword(), BCrypt.gensalt());
			nuevoUsuario.setPassword(contraEncriptada);
			return repoUser.save(nuevoUsuario);
		}
	}
	
	//Funcion de inicio de sesion
	public User login(LoginUser nuevoLogin, BindingResult result) {
		
		//Buscamos por correo electronico
		Optional<User> posibleUsuario = repoUser.findByEmail(nuevoLogin.getEmail());
		
		if(!posibleUsuario.isPresent()) {
			result.rejectValue("email", "Unique", "El correo no esta registrado");
			return null;
		}
		
		User userLogin = posibleUsuario.get(); //Usuario que me regresa mi BD	
		if(!BCrypt.checkpw(nuevoLogin.getPassword(), userLogin.getPassword())) {
			result.rejectValue("password", "Matches", "Contrase単a Invalida!");
		}	
		
		if(result.hasErrors()) {
			return null;
		}else {
			return userLogin;
		}
	}
	
	//Guarda objeto de proyecto en base de datos	
	public Project saveProject(Project nuevoProyecto) {
		return repoProject.save(nuevoProyecto);				
	}
	
	//Regrese objeto de usuario en base a su ID	
	public User findUser(Long id) {
		return repoUser.findById(id).orElse(null);
	}
	
	//Guarda en BD los cambios de usuario
	public User saveUsuario(User user) {
		return repoUser.save(user);
	}
	
	/*Regrese la lista de proyectos a los cuales No pertenezco*/
	public List<Project> findOtherProjects(User userSession){
		return repoProject.findByUsersJoinedNotContains(userSession);
	}
	
	/*Regrese la lista de proyectos a los cuales SI pertenezco*/
	public List<Project> findMyProjects(User userSession){
		return repoProject.findAllByUsersJoined(userSession);
	}
	
	//Regrese objeto de proyecto en base a su Id
	public Project findProject(Long id) {
		return repoProject.findById(id).orElse(null);
	}	
	
	//Metodo que nos una a un proyecto
	public void saveProjectUser(Long projectId, Long userId) {
		User myUser = findUser(userId); //Obtiene el objeto de usuario		
		Project myProject = findProject(projectId);
		
		myUser.getProjectsJoined().add(myProject);
		repoUser.save(myUser);		
	}
	
}

